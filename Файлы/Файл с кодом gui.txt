
class MainAdmin:
    def __init__(self, db):
        self.db = db
        self.root = tk.Tk()
        self.root.title("Приложение админа")
        self.root.state('zoomed')

        self.menu_frame = tk.Frame(self.root, bg='cyan', height=50)
        self.menu_frame.pack(fill='x')

        self.add_user_button = tk.Button(self.menu_frame, text="Добавить пользователя", command=self.open_add_user_frame)
        self.add_user_button.pack(side='left', padx=10, pady=10)

        self.create_group_button = tk.Button(self.menu_frame, text="Создать группу", command=self.open_create_group_frame)
        self.create_group_button.pack(side='left', padx=10, pady=10)

        self.add_student_to_group_button = tk.Button(self.menu_frame, text="Добавить студента в группу", command=self.open_add_student_to_group_frame)
        self.add_student_to_group_button.pack(side='left', padx=10, pady=10)

        self.import_users_button = tk.Button(self.menu_frame, text="Импортировать пользователей из csv файла", command=self.open_import_users_frame)
        self.import_users_button.pack(side='left', padx=10, pady=10)

        self.users_table_button = tk.Button(self.menu_frame, text="Показать таблицу пользователей", command=self.open_users_table_frame)
        self.users_table_button.pack(side='left', padx=10, pady=10)

        self.root.mainloop()

    def open_add_user_frame(self):
        self.clear_main_frame()
        self.add_user_frame = tk.Frame(self.root)
        self.add_user_frame.pack(fill='both', expand=True)
        AddUserWindow(self.add_user_frame, self.db)

    def open_create_group_frame(self):
        self.clear_main_frame()
        self.create_group_frame = tk.Frame(self.root)
        self.create_group_frame.pack(fill='both', expand=True)
        CreateGroupWindow(self.create_group_frame, self.db)

    def open_add_student_to_group_frame(self):
        self.clear_main_frame()
        self.add_student_to_group_frame = tk.Frame(self.root)
        self.add_student_to_group_frame.pack(fill='both', expand=True)
        AddStudentToGroupWindow(self.add_student_to_group_frame, self.db)

    def open_import_users_frame(self):
        self.clear_main_frame()
        self.import_users_frame = tk.Frame(self.root)
        self.import_users_frame.pack(fill='both', expand=True)
        ImportUsers(self.import_users_frame, self.db)

    def open_users_table_frame(self):
        self.clear_main_frame()
        self.users_table_frame = tk.Frame(self.root)
        self.users_table_frame.pack(fill='both', expand=True)
        UsersTableWindow(self.users_table_frame, self.db)

    def clear_main_frame(self):
        for widget in self.root.winfo_children():
            if widget != self.menu_frame:
                widget.destroy()

class AddUserWindow:
    def __init__(self, parent_frame, db):
        self.parent_frame = parent_frame
        self.db = db

        self.name_label = tk.Label(self.parent_frame, text="Имя:")
        self.name_label.pack(pady=5)
        self.name_entry = tk.Entry(self.parent_frame)
        self.name_entry.pack(pady=5)

        self.login_label = tk.Label(self.parent_frame, text="Логин:")
        self.login_label.pack(pady=5)
        self.login_entry = tk.Entry(self.parent_frame)
        self.login_entry.pack(pady=5)

        self.password_label = tk.Label(self.parent_frame, text="Пароль:")
        self.password_label.pack(pady=5)
        self.password_entry = tk.Entry(self.parent_frame, show='*')
        self.password_entry.pack(pady=5)

        self.role_label = tk.Label(self.parent_frame, text="Роль:")
        self.role_label.pack(pady=5)

        self.role_combobox = ttk.Combobox(self.parent_frame, state="readonly")
        self.role_combobox.pack(pady=5)
        self.role_combobox['values'] = self.get_roles()

        self.add_button = tk.Button(self.parent_frame, text="Добавить", command=self.add_user)
        self.add_button.pack(pady=10)

    def get_roles(self):
        self.db.cur.execute("SELECT Description FROM TypeOfUsers")
        roles = [row[0] for row in self.db.cur.fetchall()]
        return roles

    def add_user(self):
        name = self.name_entry.get()
        login = self.login_entry.get()
        password = self.password_entry.get()
        role = self.role_combobox.get()

        self.db.cur.execute("SELECT Code FROM TypeOfUsers WHERE Description = ?", (role,))
        role_code = self.db.cur.fetchone()[0]

        if self.db.add_user(name, login, password, role_code):
            messagebox.showinfo("Успех", "Пользователь успешно добавлен")
            self.parent_frame.destroy()  # Закрыть фрейм после успешного добавления пользователя
        else:
            messagebox.showinfo("Ошибка", "Пользователь с таким логином уже существует")

class CreateGroupWindow:
    def __init__(self, parent_frame, db):
        self.parent_frame = parent_frame
        self.db = db

        self.group_name_label = tk.Label(self.parent_frame, text="Название группы:")
        self.group_name_label.pack(pady=5)
        self.group_name_entry = tk.Entry(self.parent_frame)
        self.group_name_entry.pack(pady=5)

        self.create_button = tk.Button(self.parent_frame, text="Создать", command=self.create_group)
        self.create_button.pack(pady=10)

    def create_group(self):
        group_name = self.group_name_entry.get()

        if group_name != '':
            if self.db.create_group(group_name):
                messagebox.showinfo("Успех", "Группа успешно создана")
                self.parent_frame.destroy()
            else:
                messagebox.showerror("Ошибка", "Группа с таким именем уже существует")

class AddStudentToGroupWindow:
    def __init__(self, parent_frame, db):
        self.parent_frame = parent_frame
        self.db = db

        self.group_name_label = tk.Label(self.parent_frame, text="Название группы:")
        self.group_name_label.pack(pady=5)

        self.group_names = self.get_group_names()
        self.group_combobox = ttk.Combobox(self.parent_frame, values=self.group_names)
        self.group_combobox.pack(pady=5)

        self.student_login_label = tk.Label(self.parent_frame, text="Логин студента:")
        self.student_login_label.pack(pady=5)
        self.student_login_entry = tk.Entry(self.parent_frame)
        self.student_login_entry.pack(pady=5)

        self.add_button = tk.Button(self.parent_frame, text="Добавить", command=self.add_student_to_group)
        self.add_button.pack(pady=10)

    def get_group_names(self):
        self.db.cur.execute("SELECT NameGroup FROM [Group]")
        group_names = [row[0] for row in self.db.cur.fetchall()]
        return group_names

    def add_student_to_group(self):
        group_name = self.group_combobox.get()
        student_login = self.student_login_entry.get()

        if self.db.add_student_to_group(group_name, student_login):
            messagebox.showinfo("Успех", "Студент успешно добавлен в группу")
        else:
            messagebox.showerror("Ошибка", "Ошибка при добавлении студента в группу")

class ImportUsers:
    def __init__(self, parent_frame, db):
        self.parent_frame = parent_frame
        self.db = db

        self.group_name_label = tk.Label(self.parent_frame, text="Роль:")
        self.group_name_label.pack(pady=5)

        self.group_names = self.get_roles()
        self.group_combobox = ttk.Combobox(self.parent_frame, values=self.group_names)
        self.group_combobox.pack(pady=5)

        self.select_button = tk.Button(self.parent_frame, text="Выбрать файл", command=self.select_file)
        self.select_button.pack(pady=5)

        self.import_button = tk.Button(self.parent_frame, text="Импортировать", command=self.import_users)
        self.import_button.pack(pady=10)

    def get_roles(self):
        self.db.cur.execute("SELECT Description FROM TypeOfUsers")
        roles = [row[0] for row in self.db.cur.fetchall()]
        return roles

    def select_file(self):
        self.file_path = filedialog.askopenfilename()

    def get_role_code(self, role_name):
        self.db.cur.execute("SELECT Code FROM TypeOfUsers WHERE Description = ?", (role_name,))
        role_code = self.db.cur.fetchone()
        if role_code:
            return role_code[0]
        else:
            return None

    def import_users(self):
        if self.file_path:
            role_name = self.group_combobox.get()
            if role_name:
                role_code = self.get_role_code(role_name)
                if role_code:
                    self.db.import_users(self.file_path, role_code)
                else:
                    messagebox.showerror("Ошибка", "Невозможно получить код роли.")
            else:
                messagebox.showerror("Ошибка", "Пожалуйста, выберите роль перед импортом.")
        else:
            messagebox.showerror("Ошибка", "Пожалуйста, выберите файл перед импортом.")

class UsersTableWindow:
    def __init__(self, parent_frame, db):
        self.parent_frame = parent_frame
        self.db = db

        self.frame = tk.Frame(self.parent_frame)
        self.frame.pack(fill="both", expand=True)

        self.tree = ttk.Treeview(self.frame)
        self.tree["columns"] = ("Name", "Login", "Role")
        self.tree.heading("#0", text="ID")
        self.tree.heading("Name", text="Имя")
        self.tree.heading("Login", text="Логин")
        self.tree.heading("Role", text="Роль")

        self.populate_treeview()

        self.tree.pack(fill="both", expand=True)

        self.delete_button = tk.Button(self.frame, text="Удалить", command=self.delete_user)
        self.delete_button.pack(side="left", padx=5, pady=5)

        self.edit_button = tk.Button(self.frame, text="Редактировать", command=self.edit_user)
        self.edit_button.pack(side="left", padx=5, pady=5)

    def populate_treeview(self):
        for item in self.tree.get_children():
            self.tree.delete(item)

        self.db.cur.execute("SELECT ID, Name, Login, TypeOfUser FROM Users")
        users = self.db.cur.fetchall()
        for user in users:
            self.tree.insert("", "end", text=user[0], values=(user[1], user[2], user[3]))

    def delete_user(self):
        selected_item = self.tree.selection()
        if selected_item:
            user_id = self.tree.item(selected_item)["text"]
            self.db.delete_user(user_id)
            self.populate_treeview()

    def edit_user(self):
        selected_item = self.tree.selection()
        if selected_item:
            user_id = self.tree.item(selected_item)["text"]
            EditUserWindow(self.db, user_id, self)

    def refresh_table(self):
        self.populate_treeview()

class EditUserWindow:
    def __init__(self, db, user_id, users_table_window):
        self.db = db
        self.user_id = user_id
        self.users_table_window = users_table_window

        self.window = tk.Toplevel()
        self.window.title("Редактирование пользователя")

        self.name_label = tk.Label(self.window, text="Имя:")
        self.name_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.name_entry = tk.Entry(self.window)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)

        self.login_label = tk.Label(self.window, text="Логин:")
        self.login_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.login_entry = tk.Entry(self.window)
        self.login_entry.grid(row=1, column=1, padx=5, pady=5)

        self.password_label = tk.Label(self.window, text="Пароль:")
        self.password_label.grid(row=2, column=0, padx=5, pady=5, sticky="e")
        self.password_entry = tk.Entry(self.window)
        self.password_entry.grid(row=2, column=1, padx=5, pady=5)

        self.role_label = tk.Label(self.window, text="Роль:")
        self.role_label.grid(row=3, column=0, padx=5, pady=5, sticky="e")
        self.role_combobox = ttk.Combobox(self.window, state="readonly")
        self.role_combobox.grid(row=3, column=1, padx=5, pady=5)

        self.edit_button = tk.Button(self.window, text="Редактировать", command=self.edit_user)
        self.edit_button.grid(row=4, column=0, columnspan=2, padx=5, pady=10)

        self.populate_fields()

    def populate_fields(self):
        self.db.cur.execute("SELECT Name, Login, Password, TypeOfUser FROM Users WHERE ID=?", (self.user_id,))
        user_data = self.db.cur.fetchone()
        if user_data:
            self.name_entry.insert(0, user_data[0])
            self.login_entry.insert(0, user_data[1])
            self.password_entry.insert(0, user_data[2])

            self.db.cur.execute("SELECT Description FROM TypeOfUsers WHERE Code=?", (user_data[3],))
            role = self.db.cur.fetchone()
            if role:
                self.role_combobox.set(role[0])

            roles = self.get_roles()
            self.role_combobox['values'] = roles

    def get_roles(self):
        self.db.cur.execute("SELECT Description FROM TypeOfUsers")
        roles = [row[0] for row in self.db.cur.fetchall()]
        return roles

    def edit_user(self):
        name = self.name_entry.get()
        login = self.login_entry.get()
        password = self.password_entry.get()
        role = self.role_combobox.get()

        self.db.cur.execute("SELECT Code FROM TypeOfUsers WHERE Description = ?", (role,))
        role_code = self.db.cur.fetchone()[0]

        try:
            self.db.cur.execute("UPDATE Users SET Name=?, Login=?, Password=?, TypeOfUser=? WHERE ID=?",
                                (name, login, password, role_code, self.user_id))
            self.db.conn.commit()
            messagebox.showinfo("Успех", "Пользователь успешно отредактирован")
            self.users_table_window.refresh_table()  # Обновляем таблицу после изменения
            self.window.destroy()
        except Exception as e:
            messagebox.showerror("Ошибка", f"Ошибка редактирования пользователя: {e}")



class App:
    def __init__(self, db):
        self.db = db
        self.root = tk.Tk()
        self.root.title("Авторизация")
        self.root.state('zoomed')

        self.frame = tk.Frame(self.root)
        self.frame.place(relx=0.5, rely=0.5, anchor='center')

        self.login_label = tk.Label(self.frame, text="Логин:")
        self.login_label.pack(pady=10)
        self.login_entry = tk.Entry(self.frame, font=('Arial', 20))
        self.login_entry.pack(ipady=10)

        self.password_label = tk.Label(self.frame, text="Пароль:")
        self.password_label.pack(pady=10)
        self.password_entry = tk.Entry(self.frame, show='*', font=('Arial', 20))
        self.password_entry.pack(ipady=10)

        self.login_button = tk.Button(self.frame, text="Войти", command=self.login)
        self.login_button.pack(pady=10)

        self.root.mainloop()

    def login(self):
        login = self.login_entry.get()
        password = self.password_entry.get()
        
        user = self.db.verification_of_authorization(login, password)
        if user is not None:
            messagebox.showinfo("Успех", "Успешный вход")
            if user[2] == 1:
                self.root.destroy()
                MainAdmin(self.db)
        else:
            messagebox.showerror("Ошибка", "Неверный логин или пароль")















import tkinter as tk
from tkinter import messagebox
from tkinter import ttk


class AuthorizationWindow:
    def __init__(self, db):
        self.db = db
        self.main_color = '#FADFAD'
        self.root = tk.Tk()
        self.root.title("Авторизация")
        self.root.state('zoomed')
        self.root.config(bg=self.main_color)

        self.frame = tk.Frame(self.root, bg=self.main_color)
        self.frame.place(relx=0.5, rely=0.5, anchor='center')

        self.login_label = tk.Label(
            self.frame, text="Логин:", bg=self.main_color, font=('Arial', 20))
        self.login_label.grid(row=0, column=0, pady=10, sticky="e")

        self.login_entry = tk.Entry(self.frame, font=('Arial', 20))
        self.login_entry.grid(row=0, column=1, pady=10, ipady=5)

        self.password_label = tk.Label(
            self.frame, text="Пароль:", bg=self.main_color, font=('Arial', 20))
        self.password_label.grid(row=1, column=0, pady=10, sticky="e")

        self.password_entry = tk.Entry(
            self.frame, show='*', font=('Arial', 20))
        self.password_entry.grid(row=1, column=1, pady=10, ipady=5)

        self.login_button = tk.Button(
            self.frame, text="Войти", font=('Arial', 20), command=self.login)
        self.login_button.grid(row=2, columnspan=2, pady=10)

        self.root.mainloop()

    def login(self):
        login = self.login_entry.get()
        password = self.password_entry.get()

        user, role = self.db.verification_of_authorization(login, password)
        if user is not None:
            messagebox.showinfo("Успех", "Успешный вход")
            if role == 0:
                MainAdmin(self.db, self.main_color)
                self.root.destroy()
            if role == 1:
                self.root.destroy()
            if role == 2:
                self.root.destroy()
            if role == 3:
                self.root.destroy()
        else:
            messagebox.showerror("Ошибка", "Неверный логин или пароль")


class MainAdmin:
    def __init__(self, db, color):
        self.db = db
        self.main_color = color

        self.window_admin = tk.Tk()
        self.window_admin.title('Администратор')
        self.window_admin.state('zoomed')
        self.window_admin.config(bg=self.main_color)

        self.screen_width = self.window_admin.winfo_screenwidth()
        self.screen_height = self.window_admin.winfo_screenheight()

        self.main_frame = tk.Frame(self.window_admin, bg='Orange', height=180)
        self.main_frame.grid(row=0, column=0, sticky='ew')

        self.frame_table = tk.Frame(
            self.window_admin, bg='Black', width=self.screen_width)
        self.frame_table.grid(row=1, column=0, sticky='nsew')

        self.window_admin.grid_rowconfigure(1, weight=1)
        self.window_admin.grid_columnconfigure(0, weight=1)

        self.button_users = tk.Button(self.main_frame, text='Пользователи', font=(
            'Arial', 24), command=self.click_button_user)
        self.button_users.grid(row=0, column=0, padx=10,
                               pady=10, sticky="nsew")

        self.button_group = tk.Button(self.main_frame, font=('Arial', 24))
        self.button_group.grid(row=0, column=1, padx=10,
                               pady=10, sticky="nsew")

        self.button_test = tk.Button(self.main_frame, font=('Arial', 24))
        self.button_test.grid(row=0, column=2, padx=10, pady=10, sticky="nsew")

        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.columnconfigure(1, weight=1)
        self.main_frame.columnconfigure(2, weight=1)

    def click_button_user(self):
        # Очистка фрейма таблиц, если уже что-то было
        for widget in self.frame_table.winfo_children():
            widget.destroy()

        self.dop_frame = tk.Frame(
            self.frame_table, height=120, width=self.screen_width, bg='Green')
        self.dop_frame.grid(row=0, column=0, sticky='ew')

        button = tk.Button(self.dop_frame, text='Руководящий состав',
                           command=self.create_scrollable_tables)
        button.pack()

        # Создание фрейма для таблиц
        self.table_frame = tk.Frame(self.frame_table, bg='Pink')
        self.table_frame.grid(row=1, column=0, sticky='nsew')
        self.frame_table.grid_rowconfigure(1, weight=1)
        self.frame_table.grid_columnconfigure(0, weight=1)

    def create_scrollable_tables(self):
        # Очистка фрейма таблиц, если уже что-то было
        for widget in self.table_frame.winfo_children():
            widget.destroy()

        # Создаем фрейм для скроллера
        scroll_frame = tk.Frame(self.table_frame, bg='White')
        scroll_frame.grid(row=0, column=0, sticky='nsew')
        
        scroll_frame.grid_rowconfigure(0, weight=1)
        scroll_frame.grid_columnconfigure(0, weight=1)
        
        self.table_frame.grid_rowconfigure(0, weight=1)
        self.table_frame.grid_columnconfigure(0, weight=1)

        # Создаем канвас и скроллбар
        canvas = tk.Canvas(scroll_frame, bg='White')
        scrollbar = ttk.Scrollbar(scroll_frame, orient='vertical', command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='Black')

        # Устанавливаем размеры канваса и скроллируемого фрейма
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # Связываем событие прокрутки колесика мыши с прокруткой канваса
        canvas.bind_all("<MouseWheel>", lambda event: canvas.yview_scroll(
            int(-1*(event.delta/120)), "units"))

        # Изменено с 'ew' на 'nsew'
        canvas.grid(row=0, column=0, sticky='nsew')
        canvas.grid_rowconfigure(0, weight=1)
        canvas.grid_columnconfigure(0, weight=1)
        scrollbar.grid(row=0, column=1, sticky='ns')  # Изменено с '' на 'ns'

        # Создаем три таблицы и кнопки под каждой из них
        self.create_table_admin(scrollable_frame, "Администратор", 0)
        self.create_table_curator(scrollable_frame, "Куратор", 1)
        self.create_table_teacher(scrollable_frame, "Преподаватель", 2)

    def create_table_admin(self, parent, title, role):
        frame = tk.Frame(parent, bg='White')
        frame.grid(sticky='ew')

        label = tk.Label(frame, text=title, font=('Arial', 24))
        label.grid(sticky='ew')

        self.table_admin = ttk.Treeview(frame)
        self.table_admin["columns"] = ("Name", "Login")
        self.table_admin.heading("#0", text="ID")
        self.table_admin.heading("Name", text="Имя")
        self.table_admin.heading("Login", text="Логин")

        # Устанавливаем ширину колонок и шрифт для текста в таблице
        screen_width = self.window_admin.winfo_screenwidth()
        self.table_admin.column("#0", width=screen_width//10, anchor='center')
        self.table_admin.column("Name", width=screen_width//3, anchor='center')
        self.table_admin.column(
            "Login", width=screen_width//3, anchor='center')
        style = ttk.Style(self.table_admin)
        style.configure("Treeview.Heading", font=('Arial', 16))
        style.configure("Treeview", rowheight=40, font=('Arial', 16))

        self.db.populate_treeview(self.table_admin, role)

        self.table_admin.grid(sticky='ew')

        button_frame = tk.Frame(frame, bg='White')
        button_frame.grid(sticky='ew')

        for text, handler in [("Добавить", self.add_user_admin), ("Удалить", self.delete_user_admin), ("Редактировать", self.edit_user_admin)]:
            button = tk.Button(button_frame, text=text, font=('Arial', 16), command=handler)
            button.grid(sticky='ew')

    def create_table_curator(self, parent, title, role):
        frame = tk.Frame(parent, bg='White')
        frame.grid(sticky='ew')

        label = tk.Label(frame, text=title, font=('Arial', 24))
        label.grid(sticky='ew')

        self.table_curator = ttk.Treeview(frame)
        self.table_curator["columns"] = ("Name", "Login")
        self.table_curator.heading("#0", text="ID")
        self.table_curator.heading("Name", text="Имя")
        self.table_curator.heading("Login", text="Логин")

        # Устанавливаем ширину колонок и шрифт для текста в таблице
        screen_width = self.window_admin.winfo_screenwidth()
        self.table_curator.column(
            "#0", width=screen_width//10, anchor='center')
        self.table_curator.column(
            "Name", width=screen_width//3, anchor='center')
        self.table_curator.column(
            "Login", width=screen_width//3, anchor='center')
        style = ttk.Style(self.table_curator)
        style.configure("Treeview.Heading", font=('Arial', 16))
        style.configure("Treeview", rowheight=40, font=('Arial', 16))

        self.db.populate_treeview(self.table_curator, role)

        self.table_curator.grid(sticky='ew')

        button_frame = tk.Frame(frame, bg='White')
        button_frame.grid(sticky='ew')

        for text, handler in [("Добавить", self.add_user_curator), ("Удалить", self.delete_user_curator), ("Редактировать", self.edit_user_curator)]:
            button = tk.Button(button_frame, text=text,
                               font=('Arial', 16), command=handler)
            button.grid(sticky='ew')

    def create_table_teacher(self, parent, title, role):
        frame = tk.Frame(parent, bg='White')
        frame.grid(sticky='ew')

        label = tk.Label(frame, text=title, font=('Arial', 24))
        label.grid(sticky='ew')

        self.table_teacher = ttk.Treeview(frame)
        self.table_teacher["columns"] = ("Name", "Login")
        self.table_teacher.heading("#0", text="ID")
        self.table_teacher.heading("Name", text="Имя")
        self.table_teacher.heading("Login", text="Логин")

        # Устанавливаем ширину колонок и шрифт для текста в таблице
        screen_width = self.window_admin.winfo_screenwidth()
        self.table_teacher.column(
            "#0", width=screen_width//10, anchor='center')
        self.table_teacher.column(
            "Name", width=screen_width//3, anchor='center')
        self.table_teacher.column(
            "Login", width=screen_width//3, anchor='center')
        style = ttk.Style(self.table_teacher)
        style.configure("Treeview.Heading", font=('Arial', 16))
        style.configure("Treeview", rowheight=40, font=('Arial', 16))

        self.db.populate_treeview(self.table_teacher, role)

        self.table_teacher.grid(sticky='ew')

        button_frame = tk.Frame(frame, bg='White')
        button_frame.grid(sticky='ew')

        for text, handler in [("Добавить", self.add_user_teacher), ("Удалить", self.delete_user_teacher), ("Редактировать", self.edit_user_teacher)]:
            button = tk.Button(button_frame, text=text,
                               font=('Arial', 16), command=handler)
            button.grid(sticky='ew')

    def add_user_admin(self):
        pass

    def delete_user_admin(self):
        pass

    def edit_user_admin(self):
        pass

    def add_user_curator(self):
        pass

    def delete_user_curator(self):
        pass

    def edit_user_curator(self):
        pass

    def add_user_teacher(self):
        pass

    def delete_user_teacher(self):
        pass

    def edit_user_teacher(self):
        pass


class AddUserWindow:
    def __init__(self, parent_frame, db, table, role):
        self.parent_frame = parent_frame
        self.db = db
        self.table = table
        self.role = role

        self.name_label = tk.Label(self.parent_frame, text="Имя:")
        self.name_label.pack(pady=5)
        self.name_entry = tk.Entry(self.parent_frame)
        self.name_entry.pack(pady=5)

        self.login_label = tk.Label(self.parent_frame, text="Логин:")
        self.login_label.pack(pady=5)
        self.login_entry = tk.Entry(self.parent_frame)
        self.login_entry.pack(pady=5)

        self.password_label = tk.Label(self.parent_frame, text="Пароль:")
        self.password_label.pack(pady=5)
        self.password_entry = tk.Entry(self.parent_frame, show='*')
        self.password_entry.pack(pady=5)

        self.add_button = tk.Button(
            self.parent_frame, text="Добавить", command=self.add_user)
        self.add_button.pack(pady=10)

    def add_user(self):
        name = self.name_entry.get()
        login = self.login_entry.get()
        password = self.password_entry.get()
        role = self.role

        if self.db.add_user(name, login, password, role, self.table):
            messagebox.showinfo("Успех", "Пользователь успешно добавлен")
            self.parent_frame.master.destroy()
        else:
            messagebox.showerror(
                "Ошибка", "Пользователь с таким логином уже существует")


class EditUserWindow:
    def __init__(self, parent_frame, db, table, user_id, role):
        self.db = db
        self.user_id = user_id
        self.users_table_window = table
        self.role = role
        self.parent_frame = parent_frame

        self.name_label = tk.Label(self.parent_frame, text="Имя:")
        self.name_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.name_entry = tk.Entry(self.parent_frame)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)

        self.login_label = tk.Label(self.parent_frame, text="Логин:")
        self.login_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.login_entry = tk.Entry(self.parent_frame)
        self.login_entry.grid(row=1, column=1, padx=5, pady=5)

        self.password_label = tk.Label(self.parent_frame, text="Пароль:")
        self.password_label.grid(row=2, column=0, padx=5, pady=5, sticky="e")
        self.password_entry = tk.Entry(self.parent_frame)
        self.password_entry.grid(row=2, column=1, padx=5, pady=5)

        self.edit_button = tk.Button(
            self.parent_frame, text="Редактировать", command=self.edit_user)
        self.edit_button.grid(row=4, column=0, columnspan=2, padx=5, pady=10)

        self.populate_fields()

    def populate_fields(self):
        user_info = self.db.get_user_info(self.user_id, self.login)

        if user_info:
            self.name_entry.insert(0, user_info['name'])
            self.login_entry.insert(0, user_info['login'])
            self.password_entry.insert(0, user_info['password'])

    def edit_user(self):
        name = self.name_entry.get()
        login = self.login_entry.get()
        password = self.password_entry.get()
        role = self.role
        table = self.users_table_window
        user_id = self.user_id

        if self.db.edit_user(name, login, password, role, table, user_id):
            messagebox.showinfo("Успех", "Пользователь успешно обнавлен")
            self.parent_frame.master.destroy()
        else:
            messagebox.showerror(
                "Ошибка", "Пользователь с таким логином уже есть")
